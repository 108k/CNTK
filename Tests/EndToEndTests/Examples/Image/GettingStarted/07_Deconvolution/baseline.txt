CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2690 v3 @ 2.60GHz
    Hardware threads: 12
    Total Memory: 57700428 kB
-------------------------------------------------------------------
=== Running /home/ubuntu/workspace/build/1bitsgd/release/bin/cntk configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/07_Deconvolution/../../../../../../Examples/Image/GettingStarted/07_Deconvolution_BS.cntk currentDirectory=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST RunDir=/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu DataDir=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/07_Deconvolution/../../../../../../Examples/Image/GettingStarted OutputDir=/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu DeviceId=-1 timestamping=true forceDeterministicAlgorithms=true stderr=-
CNTK 2.3.1+ (HEAD f4f0f8, Dec 11 2017 18:34:12) at 2017/12/12 06:04:17

/home/ubuntu/workspace/build/1bitsgd/release/bin/cntk  configFile=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/07_Deconvolution/../../../../../../Examples/Image/GettingStarted/07_Deconvolution_BS.cntk  currentDirectory=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST  RunDir=/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu  DataDir=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST  ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/07_Deconvolution/../../../../../../Examples/Image/GettingStarted  OutputDir=/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu  DeviceId=-1  timestamping=true  forceDeterministicAlgorithms=true  stderr=-
Changed current directory to /home/ubuntu/workspace/Examples/Image/DataSets/MNIST
12/12/2017 06:04:17: Redirecting stderr to file -_trainNetwork_testNetwork.log
12/12/2017 06:04:17: -------------------------------------------------------------------
12/12/2017 06:04:17: Build info: 

12/12/2017 06:04:17: 		Built time: Dec 11 2017 18:28:39
12/12/2017 06:04:17: 		Last modified date: Wed Nov 15 09:27:10 2017
12/12/2017 06:04:17: 		Build type: release
12/12/2017 06:04:17: 		Build target: GPU
12/12/2017 06:04:17: 		With 1bit-SGD: yes
12/12/2017 06:04:17: 		With ASGD: yes
12/12/2017 06:04:17: 		Math lib: mkl
12/12/2017 06:04:17: 		CUDA version: 9.0.0
12/12/2017 06:04:17: 		CUDNN version: 7.0.4
12/12/2017 06:04:17: 		Build Branch: HEAD
12/12/2017 06:04:17: 		Build SHA1: f4f0f82eabcc482dbd03af1f946a44ae2b8b97bf
12/12/2017 06:04:17: 		MPI distribution: Open MPI
12/12/2017 06:04:17: 		MPI version: 1.10.7
12/12/2017 06:04:17: -------------------------------------------------------------------
12/12/2017 06:04:17: -------------------------------------------------------------------
12/12/2017 06:04:17: GPU info:

12/12/2017 06:04:17: 		Device[0]: cores = 3072; computeCapability = 5.2; type = "Tesla M60"; total memory = 8123 MB; free memory = 8112 MB
12/12/2017 06:04:17: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 07_Deconvolution_BS.cntk:command=trainNetwork:testNetwork
configparameters: 07_Deconvolution_BS.cntk:ConfigDir=/home/ubuntu/workspace/Tests/EndToEndTests/Examples/Image/GettingStarted/07_Deconvolution/../../../../../../Examples/Image/GettingStarted
configparameters: 07_Deconvolution_BS.cntk:currentDirectory=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST
configparameters: 07_Deconvolution_BS.cntk:dataDir=/home/ubuntu/workspace/Examples/Image/DataSets/MNIST
configparameters: 07_Deconvolution_BS.cntk:deviceId=-1
configparameters: 07_Deconvolution_BS.cntk:forceDeterministicAlgorithms=true
configparameters: 07_Deconvolution_BS.cntk:modelPath=/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu/Models/07_Deconvolution_BS.model
configparameters: 07_Deconvolution_BS.cntk:outputDir=/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu
configparameters: 07_Deconvolution_BS.cntk:precision=float
configparameters: 07_Deconvolution_BS.cntk:rootDir=..
configparameters: 07_Deconvolution_BS.cntk:RunDir=/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu
configparameters: 07_Deconvolution_BS.cntk:stderr=-
configparameters: 07_Deconvolution_BS.cntk:testNetwork={
    action = "test"
minibatchSize = 1024    
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/ubuntu/workspace/Examples/Image/DataSets/MNIST/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}

configparameters: 07_Deconvolution_BS.cntk:timestamping=true
configparameters: 07_Deconvolution_BS.cntk:traceLevel=1
configparameters: 07_Deconvolution_BS.cntk:trainNetwork={
    action = "train"
    BrainScriptNetworkBuilder = {
        cMap = 1
        model = inputFeatures => {
            conv1   = ConvolutionalLayer {cMap, (5:5), pad=true, activation=ReLU}(inputFeatures)
            pool1   = MaxPoolingLayer {(4:4), stride=(4:4)}(conv1)
            unpool1 = MaxUnpoolingLayer {(4:4), stride=(4:4)}(pool1, conv1)
            deconv1 = ConvolutionTransposeLayer {1, (5:5), cMap, pad=true, bias=false}(unpool1)
        }.deconv1
        imageShape = 28:28:1
        features = Input {imageShape}
        featScale = 1/256
        Scale{f} = x => Constant(f) .* x
        f1 = Scale{featScale} (features)
        z = model (f1)
        f2 = Scale{featScale} (features)
        err = z - f2
        sqErr = ElementTimes(err, err)
        mse = ReduceMean(sqErr)
        rmse = Sqrt(mse)
        featureNodes = (features)
        criterionNodes = (rmse)
        evaluationNodes = (rmse)
        outputNodes = (z)
    }
    SGD = {
        epochSize = 60000
        minibatchSize = 64
        maxEpochs = 3
        learningRatesPerSample = 0.00015
        momentumAsTimeConstant = 600
        firstMBsToShowResult = 5
        numMBsToShowResult = 235
    }
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/ubuntu/workspace/Examples/Image/DataSets/MNIST/Train-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }   
}

configparameters: 07_Deconvolution_BS.cntk:writeResults={
    action = "write"
    minibatchSize = 1
    outputPath = "/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu/decoder_output_bs.txt"
    reader = {
        randomize = False
        readerType = "CNTKTextFormatReader"
        file = "/home/ubuntu/workspace/Examples/Image/DataSets/MNIST/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}

12/12/2017 06:04:17: Commands: trainNetwork testNetwork
12/12/2017 06:04:17: precision = "float"
12/12/2017 06:04:17: WARNING: forceDeterministicAlgorithms flag is specified. Using 1 CPU thread for processing.

12/12/2017 06:04:17: ##############################################################################
12/12/2017 06:04:17: #                                                                            #
12/12/2017 06:04:17: # trainNetwork command (train action)                                        #
12/12/2017 06:04:17: #                                                                            #
12/12/2017 06:04:17: ##############################################################################

12/12/2017 06:04:17: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 0 x 1] as glorotUniform later when dimensions are fully known.

Post-processing network...

2 roots:
	rmse = Sqrt()
	z = Convolution()

Validating network. 18 nodes to process in pass 1.

Validating --> z.deconv1.W = LearnableParameter() :  -> [5 x 5 x 1 x 1]
Validating --> z.conv1.W = LearnableParameter() :  -> [5 x 5 x 0 x 1]
Validating --> f1.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> f1 = ElementTimes (f1.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Node 'z.conv1.W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 1 x 1].
Node 'z.conv1.W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 1 x 1] <- glorotUniform(seed=2, init dims=[25 x 25], range=0.346410(0.346410*1.000000), onCPU=true.
)Validating --> z.conv1.c = Convolution (z.conv1.W, f1) : [5 x 5 x 1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> z.conv1.b = LearnableParameter() :  -> [1 x 1 x 1]
Validating --> z.conv1.res._ = Plus (z.conv1.c, z.conv1.b) : [28 x 28 x 1 x *], [1 x 1 x 1] -> [28 x 28 x 1 x *]
Validating --> z.conv1.res = RectifiedLinear (z.conv1.res._) : [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> z.pool1 = Pooling (z.conv1.res) : [28 x 28 x 1 x *] -> [7 x 7 x 1 x *]
Validating --> z.unpool1 = MaxUnpooling (z.pool1, z.conv1.res) : [7 x 7 x 1 x *], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> z = Convolution (z.deconv1.W, z.unpool1) : [5 x 5 x 1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> f2.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> f2 = ElementTimes (f2.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> err = Minus (z, f2) : [28 x 28 x 1 x *], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> sqErr = ElementTimes (err, err) : [28 x 28 x 1 x *], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Validating --> mse = ReduceElements (sqErr) : [28 x 28 x 1 x *] -> [1 x *]
Validating --> rmse = Sqrt (mse) : [1 x *] -> [1 x *]

Validating network. 12 nodes to process in pass 2.


Validating network, final pass.

z.conv1.c: using GEMM convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 1, Kernel: 5 x 5 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.pool1: using GEMM convolution engine for geometry: Input: 28 x 28 x 1, Output: 7 x 7 x 1, Kernel: 4 x 4 x 1, Map: 1, Stride: 4 x 4 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.unpool1: using reference convolution engine for geometry, could be VERY SLOW: Input: 28 x 28 x 1, Output: 7 x 7 x 1, Kernel: 4 x 4 x 1, Map: 1, Stride: 4 x 4 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z: using GEMM convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 1, Kernel: 5 x 5 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

12/12/2017 06:04:17: 
Model has 18 nodes. Using CPU.

12/12/2017 06:04:17: Training criterion:   rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Gradient Memory Aliasing: 4 are aliased.
	z (gradient) reuses err (gradient)
	z.conv1.c (gradient) reuses z.conv1.res._ (gradient)

Memory Sharing: Out of 31 matrices, 21 are shared as 6, and 10 are not shared.

Here are the ones that share memory:
	{ err : [28 x 28 x 1 x *] (gradient)
	  sqErr : [28 x 28 x 1 x *]
	  z : [28 x 28 x 1 x *]
	  z : [28 x 28 x 1 x *] (gradient)
	  z.conv1.b : [1 x 1 x 1] (gradient)
	  z.conv1.res : [28 x 28 x 1 x *] (gradient) }
	{ f2 : [28 x 28 x 1 x *]
	  mse : [1 x *]
	  sqErr : [28 x 28 x 1 x *] (gradient)
	  z.conv1.W : [5 x 5 x 1 x 1] (gradient)
	  z.unpool1 : [28 x 28 x 1 x *] (gradient) }
	{ err : [28 x 28 x 1 x *]
	  z.conv1.c : [28 x 28 x 1 x *] (gradient)
	  z.conv1.res._ : [28 x 28 x 1 x *] (gradient)
	  z.pool1 : [7 x 7 x 1 x *] (gradient) }
	{ z.conv1.c : [28 x 28 x 1 x *]
	  z.conv1.res : [28 x 28 x 1 x *] }
	{ z.conv1.res._ : [28 x 28 x 1 x *]
	  z.unpool1 : [28 x 28 x 1 x *] }
	{ mse : [1 x *] (gradient)
	  z.deconv1.W : [5 x 5 x 1 x 1] (gradient) }

Here are the ones that don't share memory:
	{z.pool1 : [7 x 7 x 1 x *]}
	{z.deconv1.W : [5 x 5 x 1 x 1]}
	{f1 : [28 x 28 x 1 x *]}
	{z.conv1.b : [1 x 1 x 1]}
	{features : [28 x 28 x 1 x *]}
	{rmse : [1 x *] (gradient)}
	{f2.ElementTimesArgs[0] : [1 x 1]}
	{f1.ElementTimesArgs[0] : [1 x 1]}
	{rmse : [1 x *]}
	{z.conv1.W : [5 x 5 x 1 x 1]}


12/12/2017 06:04:17: Training 51 parameters in 3 out of 3 parameter tensors and 13 nodes with gradient:

12/12/2017 06:04:17: 	Node 'z.conv1.W' (LearnableParameter operation) : [5 x 5 x 1 x 1]
12/12/2017 06:04:17: 	Node 'z.conv1.b' (LearnableParameter operation) : [1 x 1 x 1]
12/12/2017 06:04:17: 	Node 'z.deconv1.W' (LearnableParameter operation) : [5 x 5 x 1 x 1]

12/12/2017 06:04:17: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

12/12/2017 06:04:17: Starting Epoch 1: learning rate per sample = 0.000150  effective momentum = 0.898824  momentum as time constant = 600.0 samples

12/12/2017 06:04:17: Starting minibatch loop.
12/12/2017 06:04:18:  Epoch[ 1 of 3]-Minibatch[   1-   1, 0.11%]: rmse = 0.33039278 * 64; time = 1.0323s; samplesPerSecond = 62.0
12/12/2017 06:04:18:  Epoch[ 1 of 3]-Minibatch[   2-   2, 0.21%]: rmse = 0.33298737 * 64; time = 0.0089s; samplesPerSecond = 7208.4
12/12/2017 06:04:18:  Epoch[ 1 of 3]-Minibatch[   3-   3, 0.32%]: rmse = 0.33108735 * 64; time = 0.0088s; samplesPerSecond = 7236.2
12/12/2017 06:04:18:  Epoch[ 1 of 3]-Minibatch[   4-   4, 0.43%]: rmse = 0.32798743 * 64; time = 0.0094s; samplesPerSecond = 6787.0
12/12/2017 06:04:18:  Epoch[ 1 of 3]-Minibatch[   5-   5, 0.53%]: rmse = 0.31937563 * 64; time = 0.0090s; samplesPerSecond = 7113.0
12/12/2017 06:04:20:  Epoch[ 1 of 3]-Minibatch[   6- 235, 25.07%]: rmse = 0.32532999 * 14720; time = 2.0733s; samplesPerSecond = 7099.7
12/12/2017 06:04:22:  Epoch[ 1 of 3]-Minibatch[ 236- 470, 50.13%]: rmse = 0.32005024 * 15040; time = 2.0783s; samplesPerSecond = 7236.6
12/12/2017 06:04:24:  Epoch[ 1 of 3]-Minibatch[ 471- 705, 75.20%]: rmse = 0.31127261 * 15040; time = 2.0947s; samplesPerSecond = 7180.2
12/12/2017 06:04:26: Finished Epoch[ 1 of 3]: [Training] rmse = 0.31327116 * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.00015000001; epochTime=9.40022s
12/12/2017 06:04:26: SGD: Saving checkpoint model '/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu/Models/07_Deconvolution_BS.model.1'

12/12/2017 06:04:26: Starting Epoch 2: learning rate per sample = 0.000150  effective momentum = 0.898824  momentum as time constant = 600.0 samples

12/12/2017 06:04:26: Starting minibatch loop.
12/12/2017 06:04:26:  Epoch[ 2 of 3]-Minibatch[   1-   1, 0.11%]: rmse = 0.27983215 * 64; time = 0.0091s; samplesPerSecond = 7018.2
12/12/2017 06:04:26:  Epoch[ 2 of 3]-Minibatch[   2-   2, 0.21%]: rmse = 0.28157482 * 64; time = 0.0089s; samplesPerSecond = 7178.2
12/12/2017 06:04:26:  Epoch[ 2 of 3]-Minibatch[   3-   3, 0.32%]: rmse = 0.28870308 * 64; time = 0.0091s; samplesPerSecond = 7054.0
12/12/2017 06:04:26:  Epoch[ 2 of 3]-Minibatch[   4-   4, 0.43%]: rmse = 0.28343225 * 64; time = 0.0102s; samplesPerSecond = 6287.1
12/12/2017 06:04:26:  Epoch[ 2 of 3]-Minibatch[   5-   5, 0.53%]: rmse = 0.28061187 * 64; time = 0.0093s; samplesPerSecond = 6878.3
12/12/2017 06:04:28:  Epoch[ 2 of 3]-Minibatch[   6- 235, 25.07%]: rmse = 0.27323572 * 14720; time = 2.0629s; samplesPerSecond = 7135.7
12/12/2017 06:04:30:  Epoch[ 2 of 3]-Minibatch[ 236- 470, 50.13%]: rmse = 0.24927891 * 15040; time = 2.1248s; samplesPerSecond = 7078.4
12/12/2017 06:04:32:  Epoch[ 2 of 3]-Minibatch[ 471- 705, 75.20%]: rmse = 0.23447441 * 15040; time = 2.1073s; samplesPerSecond = 7136.9
12/12/2017 06:04:34: Finished Epoch[ 2 of 3]: [Training] rmse = 0.24656880 * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.00015000001; epochTime=8.42038s
12/12/2017 06:04:34: SGD: Saving checkpoint model '/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu/Models/07_Deconvolution_BS.model.2'

12/12/2017 06:04:34: Starting Epoch 3: learning rate per sample = 0.000150  effective momentum = 0.898824  momentum as time constant = 600.0 samples

12/12/2017 06:04:34: Starting minibatch loop.
12/12/2017 06:04:34:  Epoch[ 3 of 3]-Minibatch[   1-   1, 0.11%]: rmse = 0.22122087 * 64; time = 0.0090s; samplesPerSecond = 7113.4
12/12/2017 06:04:34:  Epoch[ 3 of 3]-Minibatch[   2-   2, 0.21%]: rmse = 0.22912912 * 64; time = 0.0090s; samplesPerSecond = 7131.7
12/12/2017 06:04:34:  Epoch[ 3 of 3]-Minibatch[   3-   3, 0.32%]: rmse = 0.23687977 * 64; time = 0.0091s; samplesPerSecond = 7016.4
12/12/2017 06:04:34:  Epoch[ 3 of 3]-Minibatch[   4-   4, 0.43%]: rmse = 0.23658794 * 64; time = 0.0088s; samplesPerSecond = 7243.1
12/12/2017 06:04:34:  Epoch[ 3 of 3]-Minibatch[   5-   5, 0.53%]: rmse = 0.22987372 * 64; time = 0.0090s; samplesPerSecond = 7125.4
12/12/2017 06:04:37:  Epoch[ 3 of 3]-Minibatch[   6- 235, 25.07%]: rmse = 0.22736406 * 14720; time = 2.0670s; samplesPerSecond = 7121.4
12/12/2017 06:04:39:  Epoch[ 3 of 3]-Minibatch[ 236- 470, 50.13%]: rmse = 0.22564288 * 15040; time = 2.0897s; samplesPerSecond = 7197.1
12/12/2017 06:04:41:  Epoch[ 3 of 3]-Minibatch[ 471- 705, 75.20%]: rmse = 0.22394029 * 15040; time = 2.0824s; samplesPerSecond = 7222.4
12/12/2017 06:04:43: Finished Epoch[ 3 of 3]: [Training] rmse = 0.22483307 * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.00015000001; epochTime=8.35735s
12/12/2017 06:04:43: SGD: Saving checkpoint model '/tmp/cntk-test-20171211223423.932710/Examples/Image/GettingStarted_07_Deconvolution@release_cpu/Models/07_Deconvolution_BS.model'

12/12/2017 06:04:43: Action "train" complete.


12/12/2017 06:04:43: ##############################################################################
12/12/2017 06:04:43: #                                                                            #
12/12/2017 06:04:43: # testNetwork command (test action)                                          #
12/12/2017 06:04:43: #                                                                            #
12/12/2017 06:04:43: ##############################################################################


Post-processing network...

2 roots:
	rmse = Sqrt()
	z = Convolution()

Validating network. 18 nodes to process in pass 1.

Validating --> z.deconv1.W = LearnableParameter() :  -> [5 x 5 x 1 x 1]
Validating --> z.conv1.W = LearnableParameter() :  -> [5 x 5 x 1 x 1]
Validating --> f1.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> f1 = ElementTimes (f1.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> z.conv1.c = Convolution (z.conv1.W, f1) : [5 x 5 x 1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> z.conv1.b = LearnableParameter() :  -> [1 x 1 x 1]
Validating --> z.conv1.res._ = Plus (z.conv1.c, z.conv1.b) : [28 x 28 x 1 x *1], [1 x 1 x 1] -> [28 x 28 x 1 x *1]
Validating --> z.conv1.res = RectifiedLinear (z.conv1.res._) : [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> z.pool1 = Pooling (z.conv1.res) : [28 x 28 x 1 x *1] -> [7 x 7 x 1 x *1]
Validating --> z.unpool1 = MaxUnpooling (z.pool1, z.conv1.res) : [7 x 7 x 1 x *1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> z = Convolution (z.deconv1.W, z.unpool1) : [5 x 5 x 1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> f2.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> f2 = ElementTimes (f2.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> err = Minus (z, f2) : [28 x 28 x 1 x *1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> sqErr = ElementTimes (err, err) : [28 x 28 x 1 x *1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> mse = ReduceElements (sqErr) : [28 x 28 x 1 x *1] -> [1 x *1]
Validating --> rmse = Sqrt (mse) : [1 x *1] -> [1 x *1]

Validating network. 12 nodes to process in pass 2.


Validating network, final pass.

z.conv1.c: using GEMM convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 1, Kernel: 5 x 5 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.pool1: using GEMM convolution engine for geometry: Input: 28 x 28 x 1, Output: 7 x 7 x 1, Kernel: 4 x 4 x 1, Map: 1, Stride: 4 x 4 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z.unpool1: using reference convolution engine for geometry, could be VERY SLOW: Input: 28 x 28 x 1, Output: 7 x 7 x 1, Kernel: 4 x 4 x 1, Map: 1, Stride: 4 x 4 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
z: using GEMM convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 1, Kernel: 5 x 5 x 1, Map: 1, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 1), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 18 matrices, 11 are shared as 3, and 7 are not shared.

Here are the ones that share memory:
	{ sqErr : [28 x 28 x 1 x *1]
	  z : [28 x 28 x 1 x *1]
	  z.conv1.c : [28 x 28 x 1 x *1]
	  z.conv1.res : [28 x 28 x 1 x *1] }
	{ f1 : [28 x 28 x 1 x *1]
	  f2 : [28 x 28 x 1 x *1]
	  z.conv1.res._ : [28 x 28 x 1 x *1]
	  z.unpool1 : [28 x 28 x 1 x *1] }
	{ err : [28 x 28 x 1 x *1]
	  mse : [1 x *1]
	  z.pool1 : [7 x 7 x 1 x *1] }

Here are the ones that don't share memory:
	{rmse : [1 x *1]}
	{f2.ElementTimesArgs[0] : [1 x 1]}
	{features : [28 x 28 x 1 x *1]}
	{z.deconv1.W : [5 x 5 x 1 x 1]}
	{z.conv1.b : [1 x 1 x 1]}
	{f1.ElementTimesArgs[0] : [1 x 1]}
	{z.conv1.W : [5 x 5 x 1 x 1]}

12/12/2017 06:04:44: Minibatch[1-10]: rmse = 0.22248483 * 10000
12/12/2017 06:04:44: Final Results: Minibatch[1-10]: rmse = 0.22248483 * 10000

12/12/2017 06:04:44: Action "test" complete.

12/12/2017 06:04:44: __COMPLETED__